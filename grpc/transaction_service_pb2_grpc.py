# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from IS.grpc import transaction_service_pb2 as IS_dot_grpc_dot_transaction__service__pb2

GRPC_GENERATED_VERSION = '1.68.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in IS/grpc/transaction_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TransactionServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ConvertCSVToXML = channel.unary_unary(
                '/TransactionService/ConvertCSVToXML',
                request_serializer=IS_dot_grpc_dot_transaction__service__pb2.Empty.SerializeToString,
                response_deserializer=IS_dot_grpc_dot_transaction__service__pb2.StringResponse.FromString,
                _registered_method=True)
        self.GetFirstTwoTransactions = channel.unary_unary(
                '/TransactionService/GetFirstTwoTransactions',
                request_serializer=IS_dot_grpc_dot_transaction__service__pb2.Empty.SerializeToString,
                response_deserializer=IS_dot_grpc_dot_transaction__service__pb2.StringResponse.FromString,
                _registered_method=True)
        self.ValidateXML = channel.unary_unary(
                '/TransactionService/ValidateXML',
                request_serializer=IS_dot_grpc_dot_transaction__service__pb2.Empty.SerializeToString,
                response_deserializer=IS_dot_grpc_dot_transaction__service__pb2.StringResponse.FromString,
                _registered_method=True)
        self.QueryByCity = channel.unary_unary(
                '/TransactionService/QueryByCity',
                request_serializer=IS_dot_grpc_dot_transaction__service__pb2.QueryRequest.SerializeToString,
                response_deserializer=IS_dot_grpc_dot_transaction__service__pb2.StringResponse.FromString,
                _registered_method=True)
        self.QueryByTransactionID = channel.unary_unary(
                '/TransactionService/QueryByTransactionID',
                request_serializer=IS_dot_grpc_dot_transaction__service__pb2.QueryRequest.SerializeToString,
                response_deserializer=IS_dot_grpc_dot_transaction__service__pb2.StringResponse.FromString,
                _registered_method=True)


class TransactionServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ConvertCSVToXML(self, request, context):
        """Method to convert CSV to XML
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFirstTwoTransactions(self, request, context):
        """Method to get the first two transactions from the XML
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValidateXML(self, request, context):
        """Method to validate XML
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryByCity(self, request, context):
        """Method to query by city
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryByTransactionID(self, request, context):
        """Method to query by transaction ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TransactionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ConvertCSVToXML': grpc.unary_unary_rpc_method_handler(
                    servicer.ConvertCSVToXML,
                    request_deserializer=IS_dot_grpc_dot_transaction__service__pb2.Empty.FromString,
                    response_serializer=IS_dot_grpc_dot_transaction__service__pb2.StringResponse.SerializeToString,
            ),
            'GetFirstTwoTransactions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFirstTwoTransactions,
                    request_deserializer=IS_dot_grpc_dot_transaction__service__pb2.Empty.FromString,
                    response_serializer=IS_dot_grpc_dot_transaction__service__pb2.StringResponse.SerializeToString,
            ),
            'ValidateXML': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateXML,
                    request_deserializer=IS_dot_grpc_dot_transaction__service__pb2.Empty.FromString,
                    response_serializer=IS_dot_grpc_dot_transaction__service__pb2.StringResponse.SerializeToString,
            ),
            'QueryByCity': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryByCity,
                    request_deserializer=IS_dot_grpc_dot_transaction__service__pb2.QueryRequest.FromString,
                    response_serializer=IS_dot_grpc_dot_transaction__service__pb2.StringResponse.SerializeToString,
            ),
            'QueryByTransactionID': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryByTransactionID,
                    request_deserializer=IS_dot_grpc_dot_transaction__service__pb2.QueryRequest.FromString,
                    response_serializer=IS_dot_grpc_dot_transaction__service__pb2.StringResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TransactionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('TransactionService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TransactionService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ConvertCSVToXML(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/TransactionService/ConvertCSVToXML',
            IS_dot_grpc_dot_transaction__service__pb2.Empty.SerializeToString,
            IS_dot_grpc_dot_transaction__service__pb2.StringResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetFirstTwoTransactions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/TransactionService/GetFirstTwoTransactions',
            IS_dot_grpc_dot_transaction__service__pb2.Empty.SerializeToString,
            IS_dot_grpc_dot_transaction__service__pb2.StringResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ValidateXML(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/TransactionService/ValidateXML',
            IS_dot_grpc_dot_transaction__service__pb2.Empty.SerializeToString,
            IS_dot_grpc_dot_transaction__service__pb2.StringResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def QueryByCity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/TransactionService/QueryByCity',
            IS_dot_grpc_dot_transaction__service__pb2.QueryRequest.SerializeToString,
            IS_dot_grpc_dot_transaction__service__pb2.StringResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def QueryByTransactionID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/TransactionService/QueryByTransactionID',
            IS_dot_grpc_dot_transaction__service__pb2.QueryRequest.SerializeToString,
            IS_dot_grpc_dot_transaction__service__pb2.StringResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
